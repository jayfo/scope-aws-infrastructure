#
# Capture all traffic that attempts to access /api/.
#
# Priority of this rule is greater than ingress-web, this rule will happen first.
#

# https://doc.traefik.io/traefik/middlewares/stripprefix/

apiVersion: 'traefik.containo.us/v1alpha1'
kind: 'Middleware'

metadata:
  name: '{{ .Release.Name }}-stripprefix-api'

spec:
  stripPrefix:
    prefixes:
      - '/api'
    forceSlash: false

---

{{ if .Values.hostFlask }}

# https://doc.traefik.io/traefik/routing/providers/kubernetes-crd/
# https://doc.traefik.io/traefik/routing/routers/

apiVersion: 'traefik.containo.us/v1alpha1'
kind: 'IngressRoute'

metadata:
  name: '{{ .Release.Name }}-server-flask-host-flask'

spec:
  entryPoints:
    - 'websecure'
  routes:
    - kind: 'Rule'

      match: 'HostRegexp(`{{ .Values.hostFlask }}`) && PathPrefix(`/api/`)'
      priority: 10000
      middlewares:
        - name: '{{ .Release.Name }}-stripprefix-api'
      services:
        - kind: 'Service'
          name: {{ .Values.serviceServerFlask | squote }}
          port: 8000
  tls:
    secretName: {{ .Values.tlsSecret | squote }}

{{ end }}

---

{{ if .Values.hostPatient }}

# https://doc.traefik.io/traefik/routing/providers/kubernetes-crd/
# https://doc.traefik.io/traefik/routing/routers/

apiVersion: 'traefik.containo.us/v1alpha1'
kind: 'IngressRoute'

metadata:
  name: '{{ .Release.Name }}-server-flask-host-patient'

spec:
  entryPoints:
    - 'websecure'
  routes:
    - kind: 'Rule'

      match: 'HostRegexp(`{{ .Values.hostPatient }}`) && PathPrefix(`/api/`)'
      priority: 10000
      middlewares:
        - name: '{{ .Release.Name }}-stripprefix-api'
      services:
        - kind: 'Service'
          name: {{ .Values.serviceServerFlask | squote }}
          port: 8000
  tls:
    secretName: {{ .Values.tlsSecret | squote }}

{{- end }}

---

{{ if .Values.hostRegistry }}

# https://doc.traefik.io/traefik/routing/providers/kubernetes-crd/
# https://doc.traefik.io/traefik/routing/routers/

apiVersion: 'traefik.containo.us/v1alpha1'
kind: 'IngressRoute'

metadata:
  name: '{{ .Release.Name }}-server-flask-host-registry'

spec:
  entryPoints:
    - 'websecure'
  routes:
    - kind: 'Rule'

      match: 'HostRegexp(`{{ .Values.hostRegistry }}`) && PathPrefix(`/api/`)'
      priority: 10000
      middlewares:
        - name: '{{ .Release.Name }}-stripprefix-api'
      services:
        - kind: 'Service'
          name: {{ .Values.serviceServerFlask | squote }}
          port: 8000
  tls:
    secretName: {{ .Values.tlsSecret | squote }}

{{ end }}
